<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>احبك يا أبي</title>
  <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);
      height: 100vh;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: 'Tajawal', Arial, sans-serif;
      position: relative;
      color: white;
    }

    .container {
      position: relative;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      z-index: 2;
    }

    .big-heart {
      position: relative;
      width: 300px;
      height: 300px;
      margin-bottom: 30px;
      transform-style: preserve-3d;
      animation: heartbeat 1.5s infinite alternate;
      filter: drop-shadow(0 0 15px rgba(0, 100, 255, 0.5));
    }

    @keyframes heartbeat {
      0% {
        transform: scale(1);
      }
      100% {
        transform: scale(1.1);
      }
    }

    .heart {
      position: absolute;
      width: 30px;
      height: 30px;
      background: #0066ff;
      transform: rotate(45deg);
      box-shadow: 0 0 40px rgba(0, 102, 255, 0.5);
      animation: float 6s infinite;
    }

    .heart::before,
    .heart::after {
      content: "";
      position: absolute;
      width: 30px;
      height: 30px;
      background: #0066ff;
      border-radius: 50%;
    }

    .heart::before {
      top: -15px;
      left: 0;
    }

    .heart::after {
      left: -15px;
      top: 0;
    }

    @keyframes float {
      0%, 100% {
        transform: translateY(0) rotate(45deg) scale(1);
        opacity: 1;
        filter: hue-rotate(0deg);
      }
      25% {
        transform: translateY(-20px) rotate(65deg) scale(1.1);
        filter: hue-rotate(45deg);
      }
      50% {
        transform: translateY(0) rotate(45deg) scale(1);
        filter: hue-rotate(90deg);
      }
      75% {
        transform: translateY(20px) rotate(25deg) scale(0.9);
        filter: hue-rotate(45deg);
      }
    }

    .title {
      position: absolute;
      top: 40px;
      width: 100%;
      text-align: center;
      color: white;
      font-size: 4em;
      font-weight: bold;
      text-shadow: 0 0 20px rgba(0, 0, 0, 0.3), 0 0 40px rgba(0, 100, 255, 0.3);
      animation: fadeIn 2s forwards, glow 3s infinite alternate;
      letter-spacing: 2px;
    }

    @keyframes glow {
      0% {
        text-shadow: 0 0 20px rgba(0, 0, 0, 0.3), 0 0 40px rgba(0, 100, 255, 0.3);
      }
      100% {
        text-shadow: 0 0 25px rgba(0, 0, 0, 0.4), 0 0 50px rgba(0, 100, 255, 0.5);
      }
    }

    .message {
      color: white;
      font-size: 1.6em;
      text-align: center;
      text-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      max-width: 80%;
      line-height: 1.8;
      animation: fadeInUp 2s forwards;
      animation-delay: 1s;
      margin-top: 20px;
      z-index: 2;
      background: rgba(255, 255, 255, 0.1);
      padding: 20px 30px;
      border-radius: 20px;
      backdrop-filter: blur(5px);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    .particles {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
    }

    .particle {
      position: absolute;
      width: 10px;
      height: 10px;
      background: rgba(255, 255, 255, 0.5);
      border-radius: 50%;
      animation: particleFloat linear infinite;
    }

    @keyframes particleFloat {
      0% {
        transform: translateY(100vh);
        opacity: 0;
      }
      10% {
        opacity: 1;
      }
      90% {
        opacity: 1;
      }
      100% {
        transform: translateY(-20px);
        opacity: 0;
      }
    }

    /* Random floating hearts */
    .floating-hearts {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    }

    .floating-heart {
      position: absolute;
      width: 20px;
      height: 20px;
      background: rgba(255, 255, 255, 0.8);
      transform: rotate(45deg);
      animation: floatRandom linear infinite;
    }

    .floating-heart::before,
    .floating-heart::after {
      content: "";
      position: absolute;
      width: 20px;
      height: 20px;
      background: rgba(255, 255, 255, 0.8);
      border-radius: 50%;
    }

    .floating-heart::before {
      top: -10px;
      left: 0;
    }

    .floating-heart::after {
      left: -10px;
      top: 0;
    }

    @keyframes floatRandom {
      0% {
        transform: translateY(100vh) translateX(0) rotate(45deg);
        opacity: 0;
      }
      10% {
        opacity: 0.8;
      }
      90% {
        opacity: 0.8;
      }
      100% {
        transform: translateY(-100px) translateX(var(--translate-x)) rotate(45deg);
        opacity: 0;
      }
    }

    .heart-trail {
      position: absolute;
      pointer-events: none;
      z-index: 3;
    }

    .heart-trail .mini-heart {
      position: absolute;
      width: 15px;
      height: 15px;
      background: white;
      transform: rotate(45deg);
      opacity: 0.8;
      animation: fadeOut 1s forwards;
    }

    .heart-trail .mini-heart::before,
    .heart-trail .mini-heart::after {
      content: "";
      position: absolute;
      width: 15px;
      height: 15px;
      background: white;
      border-radius: 50%;
    }

    .heart-trail .mini-heart::before {
      top: -7.5px;
      left: 0;
    }

    .heart-trail .mini-heart::after {
      left: -7.5px;
      top: 0;
    }

    @keyframes fadeOut {
      to {
        opacity: 0;
        transform: rotate(45deg) scale(0.5);
      }
    }

    /* Overlay gradient */
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(ellipse at center, rgba(255,255,255,0) 0%, rgba(0,80,255,0.2) 100%);
      pointer-events: none;
      z-index: 1;
    }

    /* Responsive styles */
    @media (max-width: 768px) {
      .title {
        font-size: 3em;
        top: 30px;
      }
      
      .message {
        font-size: 1.3em;
        max-width: 90%;
        padding: 15px 20px;
      }
      
      .big-heart {
        width: 250px;
        height: 250px;
      }
    }
  </style>
</head>
<body>
  <div class="overlay"></div>
  <div class="particles" id="particles"></div>
  <div class="floating-hearts" id="floatingHearts"></div>
  
  <div class="container">
    <div class="title">احبك يا أبي</div>
    
    <div class="big-heart" id="bigHeart">
      <!-- Hearts will be added by JavaScript -->
    </div>
    
    <div class="message">اللهم احفظ أبي وارزقه الصحة والعافية وطول العمر، اللهم اجعله من الصالحين وأمدد في عمره على طاعتك، اللهم ارزقه السعادة والرضا واجعلني قرة عين له</div>
  </div>
  
  <!-- Audio element - removed autoplay -->
  <audio id="background-music" loop>
    <source src="ommy.mp3" type="audio/mp3">
    متصفحك لا يدعم عنصر الصوت.
  </audio>
  
  <script>
    // DOM Elements
    const bigHeart = document.getElementById('bigHeart');
    const particles = document.getElementById('particles');
    const floatingHearts = document.getElementById('floatingHearts');
    const backgroundMusic = document.getElementById('background-music');
    
    // Audio handling
    let audioPlayed = false;

    // Play music on any user interaction
    function playAudio() {
      if (!audioPlayed) {
        backgroundMusic.play()
          .then(() => {
            audioPlayed = true;
          })
          .catch(error => {
            console.log('Playback prevented:', error);
          });
      }
    }

    // Add event listeners for various user interactions
    ['click', 'touchstart', 'keydown', 'mousemove'].forEach(event => {
      document.addEventListener(event, playAudio, { once: true });
    });

    // Create hearts in a heart shape
    function createHearts() {
      // Clear existing hearts
      bigHeart.innerHTML = '';
      
      // Create hearts in a heart shape
      const numHearts = 40;
      const heartRadius = 120;
      
      for (let i = 0; i < numHearts; i++) {
        // Create heart element
        const heart = document.createElement('div');
        heart.classList.add('heart');
        
        // Position in a heart shape
        const angle = (i / numHearts) * Math.PI * 2;
        // Heart shape formula
        const x = heartRadius * (16 * Math.pow(Math.sin(angle), 3)) / 16;
        const y = heartRadius * (13 * Math.cos(angle) - 5 * Math.cos(2 * angle) - 2 * Math.cos(3 * angle) - Math.cos(4 * angle)) / 16;
        
        // Center the heart
        heart.style.left = `${x + 150}px`;
        heart.style.top = `${-y + 150}px`;
        
        // Randomize animation properties
        heart.style.animationDuration = `${Math.random() * 4 + 4}s`;
        heart.style.animationDelay = `${Math.random() * 2}s`;
        
        // Randomize heart sizes
        const size = Math.random() * 20 + 15;
        heart.style.width = `${size}px`;
        heart.style.height = `${size}px`;
        
        // Randomize heart colors
        const hue = Math.floor(Math.random() * 60) + 200; // Blue to purple
        heart.style.backgroundColor = `hsl(${hue}, 100%, 50%)`;
        heart.style.setProperty('--heart-color', `hsl(${hue}, 100%, 50%)`);
        
        // Add to container
        bigHeart.appendChild(heart);
      }
    }
    
    // Create floating particles
    function createParticles() {
      particles.innerHTML = '';
      
      for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Random position
        particle.style.left = `${Math.random() * 100}%`;
        
        // Random size
        const size = Math.random() * 8 + 2;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        
        // Random animation duration
        const duration = Math.random() * 15 + 10;
        particle.style.animationDuration = `${duration}s`;
        
        // Random delay
        particle.style.animationDelay = `${Math.random() * 5}s`;
        
        // Random opacity
        particle.style.opacity = `${Math.random() * 0.5 + 0.3}`;
        
        particles.appendChild(particle);
      }
    }
    
    // Create random floating hearts across the screen
    function createFloatingHearts() {
      floatingHearts.innerHTML = '';
      
      for (let i = 0; i < 60; i++) {
        const heart = document.createElement('div');
        heart.classList.add('floating-heart');
        
        // Random position
        heart.style.left = `${Math.random() * 100}%`;
        
        // Random size
        const size = Math.random() * 15 + 5;
        heart.style.width = `${size}px`;
        heart.style.height = `${size}px`;
        
        // Random animation duration
        const duration = Math.random() * 15 + 10;
        heart.style.animationDuration = `${duration}s`;
        
        // Random delay
        heart.style.animationDelay = `${Math.random() * 10}s`;
        
        // Random horizontal movement
        const translateX = (Math.random() * 200 - 100) + 'px';
        heart.style.setProperty('--translate-x', translateX);
        
        // Random color
        const hue = Math.floor(Math.random() * 60) + 200; // Blue to purple
        const saturation = Math.floor(Math.random() * 30) + 70; // 70-100%
        const lightness = Math.floor(Math.random() * 20) + 70; // 70-90%
        const opacity = Math.random() * 0.4 + 0.2; // 0.2-0.6
        
        heart.style.backgroundColor = `hsla(${hue}, ${saturation}%, ${lightness}%, ${opacity})`;
        heart.style.setProperty('--heart-color', `hsla(${hue}, ${saturation}%, ${lightness}%, ${opacity})`);
        
        // Set the same color for pseudo-elements
        const style = document.createElement('style');
        style.textContent = `
          .floating-heart:nth-child(${i+1})::before,
          .floating-heart:nth-child(${i+1})::after {
            background: hsla(${hue}, ${saturation}%, ${lightness}%, ${opacity});
          }
        `;
        document.head.appendChild(style);
        
        floatingHearts.appendChild(heart);
      }
    }
    
    // Heart trail effect
    function createHeartTrail(e) {
      const trail = document.createElement('div');
      trail.classList.add('heart-trail');
      
      // Position at cursor
      trail.style.left = `${e.clientX}px`;
      trail.style.top = `${e.clientY}px`;
      
      // Create mini hearts
      for (let i = 0; i < 3; i++) {
        const miniHeart = document.createElement('div');
        miniHeart.classList.add('mini-heart');
        
        // Random position offset
        miniHeart.style.left = `${Math.random() * 20 - 10}px`;
        miniHeart.style.top = `${Math.random() * 20 - 10}px`;
        
        // Random size
        const size = Math.random() * 10 + 5;
        miniHeart.style.width = `${size}px`;
        miniHeart.style.height = `${size}px`;
        
        // Random color
        const hue = Math.floor(Math.random() * 60) + 200;
        miniHeart.style.backgroundColor = `hsl(${hue}, 100%, 60%)`;
        miniHeart.style.setProperty('--mini-heart-color', `hsl(${hue}, 100%, 60%)`);
        
        trail.appendChild(miniHeart);
      }
      
      document.body.appendChild(trail);
      
      // Remove after animation completes
      setTimeout(() => {
        trail.remove();
      }, 1000);
    }
    
    // Mouse move event for heart trail
    document.addEventListener('mousemove', (e) => {
      // Limit the rate of heart creation
      if (Math.random() > 0.9) {
        createHeartTrail(e);
      }
    });
    
    // Touch move event for heart trail (mobile)
    document.addEventListener('touchmove', (e) => {
      if (Math.random() > 0.7) {
        createHeartTrail({
          clientX: e.touches[0].clientX,
          clientY: e.touches[0].clientY
        });
      }
    });
    
    // Initialize
    window.addEventListener('load', () => {
      createHearts();
      createParticles();
      createFloatingHearts();
      
      // Auto refresh hearts periodically
      setInterval(() => {
        createHearts();
      }, 20000);
      
      // Auto refresh floating hearts periodically
      setInterval(() => {
        createFloatingHearts();
      }, 30000);
    });
  </script>
</body>
</html>